{
    "applications": [
        {
            "id": 1,
            "title": "Speed Typing Game",
            "image": {
                "url": "./images/SpeedTypingScreenshot.png",
                "altText": "Screenshot of the Speed Typing game.",
                "order": "1"
            },
            "bodyHtml": "<p>This was the first app that I made, which I developed as part of Scrimba's React Bootcamp.</p><p>The game itself is simple &mdash; you hit &ldquo;Start&rdquo;, begin typing, and ten seconds later your word count and speed are displayed, giving you a target to beat when you play again!</p><p>By developing this app, I gained a solid understanding of the concept of <strong>controlled forms</strong> in React.</p><p><strong>Concepts used: </strong></p><ul><li>State</li><li>Hooks (including custom hooks)</li><li>Controlled forms</li></ul>",
            "appLink": {
                "href": "https://reactspeedtyping.now.sh/",
                "text": "Visit site"
            },
            "gitHubLink": {
                "href": "https://github.com/rsdev88/react-speed-typing",
                "text": "GitHub repo"
            }
        },
        {
            "id": 2,
            "title": "Shopping Basket Demo",
            "image": {
                "url": "./images/ShoppingBasketScreenshot.jpg",
                "altText": "Screenshot of the Shopping Basket demo.",
                "order": "2"
            },
            "bodyHtml": "<p>This app was the capstone project of Scrimba's React Bootcamp, pulling together all of the concepts I had learnt. The app is intended to mimic an e-commerce site whereby you can favourite items and add them to your basket. In a separate page, you can then review your basket and &lsquo;buy&rsquo; the items &mdash; a timeout is used to mimic a purchase API call.</p><p>Once the Bootcamp was finished, I continued experimenting and extended the app to store the items which are favourited or added to basket in local storage so that they aren't lost if the user refreshes their browser. I also improved the UX by adding a button to &ldquo;add favourites to basket&rdquo; and a link to return to the home page when the basket is empty.</p><p><strong>Concepts used: </strong></p><ul><li>State</li><li>Hooks (including custom hooks)</li><li>Context API</li><li>React Router</li></ul>",
            "appLink": {
                "href": "https://reactshoppingbasket.now.sh/",
                "text": "Visit site"
            },
            "gitHubLink": {
                "href": "https://github.com/rsdev88/shoppingbasket",
                "text": "GitHub repo"
            }
        },
        {
            "id": 3,
            "title": "Quizzical",
            "image": {
                "url": "./images/QuizzicalScreenshot.png",
                "altText": "Screenshot of the Quizzical web app.",
                "order": "1"
            },
            "bodyHtml": "<p>I built this web app from scratch in order to practise my new-found skills following the successful completion of the Scrimba courses and Bootcamp. In doing so I solidified my understanding of React's more advanced concepts and I'm pleased to say that the end result is something that I’m proud of.</p><p>The app itself is a quiz game and pretty straightforward to play &mdash; you answer all of the questions, check your score, and then can go back to see what you got right or wrong and reveal the correct answers.</p><p>I built the app to read in much of its data from a JSON file when it first loads, including all of the question-and-answer data. By using this approach, I've made it simple to swap out the entire quiz with a new set of questions and answers without having to make any code changes at all.</p><p><strong>Concepts used: </strong></p><ul><li>State</li><li>Hooks (including custom hooks)</li><li>Context API</li><li>Controlled forms</li><li>Props types</li><li>Opimisation using memoization</li></ul>",
            "appLink": {
                "href": "https://quizzical.now.sh/",
                "text": "Visit site"
            },
            "gitHubLink": {
                "href": "https://github.com/rsdev88/quizzical",
                "text": "GitHub repo"
            }
        },
        {
            "id": 4,
            "title": "This portfolio site!",
            "image": {
                "url": "./images/PortfolioScreenshot.png",
                "altText": "Screenshot of this site.",
                "order": "2"
            },
            "bodyHtml": "<p>When I decided to showcase my apps in a portfolio, that in itself gave me another opportunity to hone my new-found React skills!</p><p>This time I decided to change things up a little and use <strong>Redux</strong> for the site's state management, as this was another topic covered in Scrimba's Bootcamp that I wanted to practise.</p><p>In a similar approach to the Quizzical app, this repeating section that you're currently scrolling through gets all of its data from a JSON file when the site first loads, meaning that I can easily add more apps into the portfolio in future without changing the code.</p><p><strong>Concepts used: </strong></p><ul><li>Hooks</li><li>Redux</li><li>React Lazy and Suspense</li></ul>",            
            "gitHubLink": {
                "href": "https://github.com/rsdev88/robs-react-portfolio",
                "text": "GitHub repo"
            }
        },
        {
            "id": 5,
            "title": "Pokédex GraphQL Client",
            "image": {
                "url": "./images/PokedexScreenshot.png",
                "altText": "Screenshot of the Pokédex web app.",
                "order": "1"
            },
            "bodyHtml": "<p>I developed this web app following a standalone course that I completed on Scrimba which taught me how to call <strong>GraphQL</strong> APIs. The course introduced the fundamentals of using the <strong>Apollo</strong> and GraphQL libraries in React and made use of an open source GraphQL API which serves all the data you could possibly want on the late-90s cult classic cartoon, Pokémon!</p><p>I worked through the course to initially build a basic web page that retrieved a select amount of data for the first 10 Pokémon. Following on from the course, I continued to practise what I had learnt and significantly enhanced the app into a fully fledged encyclopaedia (aka, &ldquo;Pokédex&rdquo;) styled for mobile first, complete with a fast search function and results page, pagination of homepage, and a details page for all 151 Pokémon with rich information and imagery. In doing this, I gained a deeper understanding of how GraphQL and Apollo work, and improved my CSS skills, especially in using <strong>CSS Grid Layout</strong>.</p><p><strong>Concepts used: </strong></p><ul><li>GraphQL</li><li>Apollo</li><li>React Router</li><li>State</li><li>Hooks (including custom hooks)</li><li>Controlled forms</li></ul>",            
            "appLink": {
                "href": "https://react-pokedex.robsangar.now.sh/",
                "text": "Visit site"
            },
            "gitHubLink": {
                "href": "https://github.com/rsdev88/graphql-pokemon-client",
                "text": "GitHub repo"
            }
        }
    ]
}
